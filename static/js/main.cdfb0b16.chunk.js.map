{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","setState","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","delete","t0","_this2","_this$props$contact","name","email","phone","className","onClick","style","cursor","float","color","bind","Link","to","marginRight","Contacts","Fragment","contacts_Contact","TextInputGroup","_ref","label","placeholder","onChange","error","htmlFor","classnames","is-invalid","defaultProps","AddContact","errors","onSubmit","e","_this$state","newContact","preventDefault","abrupt","post","history","push","defineProperty","target","_this$state2","layout_TextInputGroup","EditContact","updContact","match","params","put","Header","branding","href","About","NotFound","Test","title","body","fetch","then","response","json","App","context_Provider","HashRouter","layout_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cdfb0b16.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"DELETE_CONTACT\":\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          contact => contact.id !== action.payload\n        )\n      };\n    case \"ADD_CONTACT\":\n      return {\n        ...state,\n        // contacts is the array of objects of contacts\n        // take payload which is the entire contact info, i.e., name, email\n        // add onto our current contacts in our state with the SPREAD operator ...state.contacts\n        contacts: [action.payload, ...state.contacts]\n      };\n    case \"UPDATE_CONTACT\":\n      return {\n        ...state,\n        contacts: state.contacts.map(contact =>\n          contact.id === action.payload.id\n            ? (contact = action.payload)\n            : contact\n        )\n      };\n    default:\n      return state;\n  }\n};\n\nexport class Provider extends Component {\n  state = {\n    contacts: [],\n    dispatch: action => this.setState(state => reducer(state, action))\n  };\n\n  // axios refactored using async which needs await that waits for the response\n  async componentDidMount() {\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n\n    this.setState({ contacts: res.data });\n  }\n\n  // componentDidMount() {\n  //   axios\n  //     .get(\"https://jsonplaceholder.typicode.com/users\")\n  //     .then(res => this.setState({ contacts: res.data }));\n  // }\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Consumer } from \"../../context\";\nimport axios from \"axios\";\n\nclass Contact extends Component {\n  state = {\n    showContactInfo: false\n  };\n\n  // async needs to go before params vs beginning when we have an arrow function like this below\n  onDeleteClick = async (id, dispatch) => {\n    // try catch workaround so we can see a deleted contact we created since we aren't using a db\n    try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n    } catch (e) {\n      dispatch({ type: \"DELETE_CONTACT\", payload: id });\n    }\n  };\n\n  render() {\n    const { id, name, email, phone } = this.props.contact;\n    const { showContactInfo } = this.state;\n\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card card-body mb-3\">\n              <h4>\n                {name}{\" \"}\n                <i\n                  onClick={() =>\n                    this.setState({\n                      showContactInfo: !this.state.showContactInfo\n                    })\n                  }\n                  className=\"fas fa-sort-down\"\n                  style={{ cursor: \"pointer\" }}\n                />\n                <i\n                  className=\"fas fa-times\"\n                  style={{ cursor: \"pointer\", float: \"right\", color: \"red\" }}\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\n                />\n                {/* id come from this.props.contact above where contact gets passed in as \n                prop and we destruct to get id, name, etc. */}\n                <Link to={`contact/edit/${id}`}>\n                  <i\n                    className=\"fas fa-pencil-alt\"\n                    style={{\n                      cursor: \"pointer\",\n                      float: \"right\",\n                      color: \"black\",\n                      marginRight: \"1rem\"\n                    }}\n                  />\n                </Link>\n              </h4>\n              {showContactInfo ? (\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">\n                    Email:\n                    {email}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Phone:\n                    {phone}\n                  </li>\n                </ul>\n              ) : null}\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired\n};\n\nexport default Contact;\n","import React, { Component } from \"react\";\nimport Contact from \"./Contact\";\nimport { Consumer } from \"../../context\";\n\nclass Contacts extends Component {\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const { contacts } = value;\n          return (\n            <React.Fragment>\n              <h1 className=\"display-4 mb-2\">\n                {\" \"}\n                <span className=\"text-danger\">Contact</span> List\n              </h1>\n              {contacts.map(contact => (\n                <Contact key={contact.id} contact={contact} />\n              ))}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Contacts;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\n// this uses deconstruction to pull props out in a const vs having to use props as input\n// e.g., const TextInputGroup = (props) => {} and then have to use type={props.type} for every input name\nconst TextInputGroup = ({\n  label,\n  name,\n  value,\n  placeholder,\n  type,\n  onChange,\n  error\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input\n        // make dynamic, i.e., type={type} vs. type=hardcoded\n        type={type}\n        name={name}\n        className={classnames(\"form-control form-control-lg\", {\n          \"is-invalid\": error\n        })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n    </div>\n  );\n};\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string\n};\n\nTextInputGroup.defaultProps = {\n  type: \"text\"\n};\n\nexport default TextInputGroup;\n","import React, { Component } from \"react\";\nimport { Consumer } from \"../../context\";\nimport TextInputGroup from \"../layout/TextInputGroup\";\n// allows us to auto create unique user id for things like adding users\n// import uuid from \"uuid\";\nimport axios from \"axios\";\n\nclass AddContact extends Component {\n  // when you create a form usually each field or input is a piece of the state\n  state = {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    errors: {}\n  };\n\n  // onSubmit method where you can see ADD_CONTACT happens with dispatch\n  // e is last here\n  onSubmit = async (dispatch, e) => {\n    // prevents any default submitting of a form\n    e.preventDefault();\n\n    // get values from the state so use destructuring\n    const { name, email, phone } = this.state;\n\n    // Check for errors\n    if (name === \"\") {\n      this.setState({ errors: { name: \"Name is required\" } });\n      return;\n    }\n\n    if (email === \"\") {\n      this.setState({ errors: { email: \"Email is required\" } });\n      return;\n    }\n\n    if (phone === \"\") {\n      this.setState({ errors: { phone: \"Phone is required\" } });\n      return;\n    }\n\n    // construct a new Contact object\n    const newContact = {\n      // auto generate a user id\n      // id: uuid(),\n      name,\n      email,\n      phone\n    };\n\n    // post request to add new user using inputs (url, and our newContact object)\n    const res = await axios.post(\n      \"https://jsonplaceholder.typicode.com/users\",\n      newContact\n    );\n\n    dispatch({ type: \"ADD_CONTACT\", payload: res.data });\n\n    // .then((\n    //   res // call dispatch by type ADD_CONTACT to perform action and res.data provides the user info and user id\n    // ) => dispatch({ type: \"ADD_CONTACT\", payload: res.data }));\n\n    // clear input fields\n    this.setState({\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      errors: {}\n    });\n\n    // Redirect using push method\n    // this doesn't redirect to a different page (page doesn't refresh at all) it's just in the React application\n    // so adding a contact will still remain in the state\n    this.props.history.push(\"/\");\n  };\n\n  // whenever you have an event you can pass an e\n  // e.target.value is how you get the value in the form fields\n  // name will access whatever is listed in the name input for each input, i.e., name = email.\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    // want value of form to be whatever is in the state for that particular field\n    // destructuring done here to pull out name, email, and phone from state\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {value => {\n          // get access to dispatch that allows us to call ADD_CONTACT\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Add Contact</div>\n              <div className=\"card-body\">\n                {/* pass in dispatch to the onSubmit call with bind so we can use it inside of onSubmit */}\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    placeholder=\"Enter Name\"\n                    value={name} // name comes from the state which we defined in the const = { name, .. } above the return\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter Email\"\n                    value={email} // email comes from the state which we defined in the const = { name, .. } above the return\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    placeholder=\"Enter Phone\"\n                    value={phone} // phone comes from the state which we defined in the const = { name, .. } above the return\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Add Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default AddContact;\n","import React, { Component } from \"react\";\nimport { Consumer } from \"../../context\";\nimport TextInputGroup from \"../layout/TextInputGroup\";\nimport axios from \"axios\";\n\nclass EditContact extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    errors: {}\n  };\n\n  async componentDidMount() {\n    const { id } = this.props.match.params;\n    const res = await axios.get(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n\n    const contact = res.data;\n\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone\n    });\n  }\n\n  onSubmit = async (dispatch, e) => {\n    e.preventDefault();\n\n    const { name, email, phone } = this.state;\n\n    // Check For Errors\n    if (name === \"\") {\n      this.setState({ errors: { name: \"Name is required\" } });\n      return;\n    }\n\n    if (email === \"\") {\n      this.setState({ errors: { email: \"Email is required\" } });\n      return;\n    }\n\n    if (phone === \"\") {\n      this.setState({ errors: { phone: \"Phone is required\" } });\n      return;\n    }\n\n    // obtained from deconstructing above from const {} = this.state\n    const updContact = {\n      name,\n      email,\n      phone\n    };\n\n    // pull the user id from url\n    const { id } = this.props.match.params;\n\n    //\n    const res = await axios.put(\n      `https://jsonplaceholder.typicode.com/users/${id}`,\n      updContact\n    );\n\n    dispatch({ type: \"UPDATE_CONTACT\", payload: res.data });\n\n    // Clear State\n    this.setState({\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      errors: {}\n    });\n\n    this.props.history.push(\"/\");\n  };\n\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\n\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Edit Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    placeholder=\"Enter Name\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter Email\"\n                    value={email} // email comes from the state which we defined in the const = { name, .. } above the return\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    placeholder=\"Enter Phone\"\n                    value={phone} // phone comes from the state which we defined in the const = { name, .. } above the return\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Update Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default EditContact;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = props => {\n  const { branding } = props;\n  return (\n    <nav\n      className=\"navbar navbar-expand-sm\n    navbar-dark bg-danger mb-3 py-0\"\n    >\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          {branding}\n        </a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">\n                <i className=\"fas fa-home\" /> Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/contact/add\" className=\"nav-link\">\n                <i className=\"fas fa-plus\" /> Add\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/about\" className=\"nav-link\">\n                <i className=\"fas fa-question\" />\n                About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\n// set default prop values which will be what is seen if nothing is set in App.js, i.e., Contact Manager\nHeader.defaultProps = {\n  branding: \"My App\"\n};\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <div>\n      <h1 className=\"display-4\">About Contact Manager</h1>\n      <p className=\"lead\">Simple App To Manage Contacts.</p>\n      <p className=\"text-secondary\">Version 1.0.0</p>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <div>\n      <h1 className=\"display-4\">\n        <span className=\"text-danger\">404</span> Not Page Not Found\n      </h1>\n      <p className=\"lead\">Sorry, that page does not exist.</p>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\n\nclass Test extends Component {\n  state = {\n    title: \"\",\n    body: \"\"\n  };\n\n  // usually where you make calls to an API and AJAX calls\n  // also do not need to use an arrow function below (i.e., compDidMount () => {}) b/c\n  // compDidMount is a lifecycle method\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/posts/1\")\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          title: data.title,\n          body: data.body\n        })\n      );\n  }\n\n  //   // this runs before DidMount\n  //   componentWillMount() {\n  //     console.log(\"componentWillMount...\");\n  //   }\n\n  // only runs when component updates, i.e., state changes\n  // if you add this method to context.js you will see this message in the console since that's a state change.\n  //   componentDidUpdate() {\n  //     console.log(\"componentDidUpdate...\");\n  //   }\n\n  //   componentWillUpdate() {}\n\n  //   // when your compoonent receives new properits, then this will run\n  //   // this is usually used with Redux\n  //   componentWillReceiveProps(nextProps, nextState) {}\n\n  //   static getDerivedStateFromProps(nextProps, prevState) {\n  //     return null;\n  //   }\n\n  render() {\n    const { title, body } = this.state;\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{body}</p>\n      </div>\n    );\n  }\n}\n\nexport default Test;\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Contacts from \"./components/contacts/Contacts\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport EditContact from \"./components/contacts/EditContact\";\nimport Header from \"./components/layout/Header\";\nimport About from \"./components/pages/About\";\nimport NotFound from \"./components/pages/NotFound\";\nimport Test from \"./components/test/Test\";\n\nimport { Provider } from \"./context\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      /*       Provider is and needs to be the outer most component\n       */\n      <Provider>\n        <Router>\n          {/* <Router basename={process.env.PUBLIC_URL}> github pages fix for BrowserRouter */}\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route\n                  exact\n                  path=\"/contact/edit/:id\"\n                  component={EditContact}\n                />{\" \"}\n                {/* need to obtain actual id so use /:id */}\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/test\" component={Test} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}